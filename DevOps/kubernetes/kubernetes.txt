Основни концепции в Kubernetes
1.Клъстер (Cluster): Група от машини (физически или виртуални),
които работят заедно и се управляват чрез Kubernetes. 
Обикновено се състои от Master Node (контролен възел) и Worker Nodes (работни възли).

2.Под (Pod): Основната единица за разполагане в Kubernetes. 
Един под съдържа един или повече контейнери, които споделят мрежа и файлово хранилище. 
Контейнерите в пода работят заедно и обикновено предоставят една и съща услуга.

3.Сервиз (Service): Kubernetes обект, който определя логична група от подове и дава постоянен 
IP адрес и DNS име за достъп до тях. Той абстрахира сложността и осигурява 
постоянен начин за свързване към подовете също осигурява баланс на натоварването и 
управление на мрежовия достъп.

4.Namespace (Име на пространство): Логическа изолация в рамките на клъстера, 
която позволява отделяне на ресурси между различни екипи или проекти.

5.ReplicationController/ReplicaSet: Управлява броя на репликите на определен под, 
които трябва да работят по всяко време.
Пример: ReplicaSet с 5 идентични пода за обработка на високо натоварване.

6.Deployment (Разгръщане): Указва как да се актуализират и управляват подовете и ReplicaSets.

7.ConfigMap и Secret: Позволяват съхранение на конфигурационни данни и 
чувствителна информация като пароли и ключове.
Пример: ConfigMap с настройки на приложението като DATABASE_HOST и CACHE_PORT.
Пример: Secret за база данни с потребителско име и парола.

8.Ingress: Позволява достъп до услугите от външния свят чрез HTTP/HTTPS.
Той позволява настройка на reverse proxy и предоставя маршрутизация и SSL управление.
Пример: Ingress за маршрутизиране на трафика към различни услуги въз основа на URL.

10.Node: 
Node е физически или виртуален сървър, върху който се изпълняват подове. 
Възелите съдържат контейнерни runtime среди (например Docker), 
както и необходимите агенти на Kubernetes (kubelet и kube-proxy). 
Всеки клъстер обикновено има Master Node и множество Worker Nodes.

11.Volume:
Volume е механизъм за съхранение на данни, който може да бъде споделен между контейнерите в под. 
Kubernetes поддържа различни видове хранилища като Persistent Volumes (PV), 
които са независими от жизнения цикъл на пода.
Пример: Обем за съхранение на файлове, който използва Amazon EBS.

12.StatefulSet:
StatefulSet е специален вид контролер, предназначен за управление на състояние в подовете. 
Подходящ е за приложения като бази данни и разпределени системи, където подовете 
трябва да имат постоянна идентичност, стабилни DNS записи и да запазват своето състояние.
Пример: Deployment на база данни MongoDB, където всеки под трябва да запази своята идентичност и състояние.

13.DaemonSet:
DaemonSet гарантира, че определен под работи на всеки възел в клъстера. 
Използва се за фонови задачи като мониторинг, събиране на логове и управление на мрежата.
Пример: Deployment на monitoring агент като Prometheus Node Exporter на всички възли.

14.Job и CronJob
Job управлява еднократно изпълнение на задачи, 
докато CronJob осигурява планирано изпълнение на задачи по подобие на cron в Linux.
Пример: Job за архивиране на база данни или CronJob за ежедневно почистване на логове.

15.Horizontal Pod Autoscaler (HPA)
Horizontal Pod Autoscaler автоматично скалира броя на подовете въз основа на натоварването 
и използването на ресурси (като CPU и памет). 
Това помага да се оптимизира използването на ресурси и да се поддържа приложението стабилно.
Пример: Скалиране на подовете от 3 до 10 в зависимост от CPU натоварването.

16.PersistentVolume (PV) и PersistentVolumeClaim (PVC)
PersistentVolume е ресурс за съхранение, дефиниран в клъстера, 
а PersistentVolumeClaim е заявка за използване на съответния обем. 
Те осигуряват постоянство на данните, независимо от жизнения цикъл на пода.
Пример: PV с Amazon EBS диск и PVC, който го използва за съхранение на данни на база данни.

17.NetworkPolicy
NetworkPolicy контролира мрежовия трафик между подовете и други ресурси. 
Той позволява налагането на правила за разрешаване или блокиране на 
комуникация въз основа на етикети и namespace.
Пример: Политика за блокиране на външния трафик към подовете, освен от определени услуги.

18.Конфигурационни данни и тайни могат да се монтират като Volume в подовете. 
Това улеснява достъпа до тях от контейнери по начин, който не изисква промени в кода.
Пример: Монтиране на Secret като файл с API ключове или на ConfigMap с конфигурационни файлове.

19.ServiceAccount и RBAC (Role-Based Access Control)
ServiceAccount е потребител за процесите, които се изпълняват в подовете. 
RBAC предоставя възможност за контрол на достъпа на базата на роли и позволяват фин контрол върху това, 
кои потребители и акаунти имат достъп до кои ресурси.
Пример: Създаване на Role и RoleBinding, за да се даде достъп на ServiceAccount само до определени ConfigMaps.

20.Helm
Helm е пакетен мениджър за Kubernetes. 
Той използва т.нар. "чартове" (charts), 
които дефинират Kubernetes ресурси като подове, 
услуги, ConfigMaps и други в единна структура. 
Това улеснява deployment-a и управлението на сложни приложения.
Пример: Инсталиране на Nginx Ingress Controller чрез Helm chart.

21.Etcd
Etcd е ключ-стойност база данни, която Kubernetes използва като хранилище 
на конфигурационни данни и състояние. Той съхранява цялата информация за клъстера, 
включително текущото състояние на всички Kubernetes обекти.
Пример: Съхранение на информация за подове, възли и конфигурационни обекти в etcd.

---------------------------
Основни команди за клъстър:
---------------------------
kubectl cluster-info                  # Показва информация за клъстера
kubectl get nodes                     # Списък с възли в клъстера
kubectl describe node <node-name>     # Показва детайли за конкретен възел
kubectl top nodes                     # Показва ресурсна статистика за възлите

---------------------------
Команди за подове и състояния:
---------------------------
kubectl get pods                          # Списък с подове в текущото namespace
kubectl describe pod <pod-name>           # Детайлна информация за конкретен под
kubectl delete pod <pod-name>             # Изтриване на под
kubectl logs <pod-name>                   # Показване на логовете на пода
kubectl exec -it <pod-name> -- /bin/bash  # Достъп до контейнер в пода (интерактивна сесия)

---------------------------
Работа със сървиси:
---------------------------
kubectl get services                  # Списък с услуги
kubectl describe service <service-name>                                       # Детайли за услуга
kubectl expose pod <pod-name> --port=8080 --target-port=80 --name=my-service  # Създаване на услуга

---------------------------
Работа с Deployments:
---------------------------
kubectl get deployments                         # Списък с всички разгръщания
kubectl create deployment my-app --image=nginx  # Създаване на ново разгръщане
kubectl scale deployment my-app --replicas=3    # Скалиране на разгръщане
kubectl rollout status deployment my-app        # Проверка на състоянието на разгръщането
kubectl delete deployment my-app                # Изтриване на разгръщане

---------------------------
Работа с ConfigMaps и Secrets:
---------------------------
kubectl create configmap my-config --from-literal=key1=value1  # Създаване на ConfigMap
kubectl get configmap                                          # Списък с ConfigMaps
kubectl describe configmap my-config                           # Детайли за ConfigMap

kubectl create secret generic my-secret --from-literal=password=mypassword  # Създаване на Secret
kubectl get secrets                                                         # Списък със Secrets
kubectl describe secret my-secret                                           # Детайли за Secret


++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Примери за Deployments:
Създаване на Deployment: 
  kubectl apply -f nginx-deployment.yaml

Създаване на Service за достъп до Deployment: 
  kubectl apply -f nginx-service.yaml


















































































